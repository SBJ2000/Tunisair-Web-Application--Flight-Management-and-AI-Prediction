# -*- coding: utf-8 -*-
"""Tunisair.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1isNgWe5P6z5g-h1kogzG2ksur_GjS46o
"""

!pip install catboost

# Commented out IPython magic to ensure Python compatibility.
import datetime, warnings, scipy 
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import ConnectionPatch
from collections import OrderedDict
from matplotlib.gridspec import GridSpec
from sklearn import metrics, linear_model
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
from scipy.optimize import curve_fit
from catboost import CatBoostRegressor
from sklearn.model_selection import GridSearchCV
from datetime import datetime


plt.rcParams["patch.force_edgecolor"] = True
plt.style.use('fivethirtyeight')
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "last_expr"
pd.options.display.max_columns = 50
# %matplotlib inline
warnings.filterwarnings("ignore")

df = pd.read_csv('/content/sample_data/Train.csv')

df.head()

"""Création de la variable trajectoire : dep-arr"""

df['trajectory'] = df['DEPSTN'] + '-' + df['ARRSTN']
df_test['trajectory'] = df_test['DEPSTN'] + '-' + df_test['ARRSTN']

"""Les trajectoires uniques"""

df['STATUS'].unique()

"""Formatter les formats de dates"""

df['month'] = pd.DatetimeIndex(df['DATOP']).month
df['day'] = pd.DatetimeIndex(df['DATOP']).day
df['day_of_week'] = pd.DatetimeIndex(df['DATOP']).dayofweek
df['year'] = pd.DatetimeIndex(df['DATOP']).year
df['week_of_year'] = pd.DatetimeIndex(df['DATOP']).week

df_test['month'] = pd.DatetimeIndex(df_test['DATOP']).month
df_test['day'] = pd.DatetimeIndex(df_test['DATOP']).day
df_test['day_of_week'] = pd.DatetimeIndex(df_test['DATOP']).dayofweek
df_test['year'] = pd.DatetimeIndex(df_test['DATOP']).year
df_test['week_of_year'] = pd.DatetimeIndex(df_test['DATOP']).week

# Adding a week of month variable
data = [df, df_test]
for dataset in data:
    dataset.loc[ dataset['day'] <= 7, 'week_of_month'] = 0
    dataset.loc[(dataset['day'] > 7) & (dataset['day'] <= 14), 'week_of_month'] = 1
    dataset.loc[(dataset['day'] > 14) & (dataset['day'] <= 21), 'week_of_month'] = 2
    dataset.loc[(dataset['day'] > 21) & (dataset['day'] <= 28), 'week_of_month'] = 3
    dataset.loc[(dataset['day'] > 28) & (dataset['day'] <= 31), 'week_of_month'] = 4
    dataset['week_of_month'] = dataset['week_of_month'].astype(int)

# Adding a season column depicting the season the flight has taken place in
data = [df, df_test]
for dataset in data:
    dataset.loc[ (dataset['month'] < 3) | (dataset['month'] == 12), 'season'] = 0
    dataset.loc[(dataset['month'] >= 3) & (dataset['month'] < 6), 'season'] = 1
    dataset.loc[(dataset['month'] >= 6) & (dataset['month'] < 9), 'season'] = 2
    dataset.loc[(dataset['month'] >= 9) & (dataset['month'] < 12), 'season'] = 3
    dataset['season'] = dataset['season'].astype(int)

df['dep_hour'] = pd.DatetimeIndex(df['STD']).hour 
df_test['dep_hour'] = pd.DatetimeIndex(df_test['STD']).hour

df['STA'] = pd.to_datetime(df['STA'], format='%Y-%m-%d %H.%M.%S')
df['arr_hour'] = pd.DatetimeIndex(df['STA']).hour 
df_test['STA'] = pd.to_datetime(df_test['STA'], format='%Y-%m-%d %H.%M.%S')
df_test['arr_hour'] = pd.DatetimeIndex(df_test['STA']).hour

df['dep_minute'] = pd.DatetimeIndex(df['STD']).minute
df_test['dep_minute'] = pd.DatetimeIndex(df_test['STD']).minute

df['arr_minute'] = pd.DatetimeIndex(df['STA']).minute 
df_test['arr_minute'] = pd.DatetimeIndex(df_test['STA']).minute

df['STA'] = pd.to_datetime(df['STA'], format='%Y-%m-%d %H:%M:%S')
df['STD'] = pd.to_datetime(df['STD'], format='%Y-%m-%d %H:%M:%S')
df_test['STA'] = pd.to_datetime(df_test['STA'], format='%Y-%m-%d %H:%M:%S')
df_test['STD'] = pd.to_datetime(df_test['STD'], format='%Y-%m-%d %H:%M:%S')
df['flight_duration_sec'] = (df['STA'] - df['STD']).values.astype(np.int64) // 10 ** 9

df_test['flight_duration_sec'] = (df_test['STA'] - df_test['STD']).values.astype(np.int64) // 10 ** 9

df['flight_duration_hours'] = df['arr_hour'] - df['dep_hour'] 
df_test['flight_duration_hours'] = df_test['arr_hour'] - df_test['dep_hour']

df['flight_duration_minutes'] = (df['flight_duration_sec'] / 60).astype(np.int64)
df_test['flight_duration_minutes'] = (df_test['flight_duration_sec'] / 60).astype(np.int64)

data = [df, df_test]
for dataset in data:
    dataset.loc[ (dataset['dep_hour'] < 12) , 'dep_hour_AM_PM'] = 0
    dataset.loc[(dataset['dep_hour'] >= 12) , 'dep_hour_AM_PM'] = 1
    dataset['dep_hour_AM_PM'] = dataset['dep_hour_AM_PM'].astype(int)

    dataset.loc[ (dataset['arr_hour'] < 12) , 'arr_hour_AM_PM'] = 0
    dataset.loc[(dataset['arr_hour'] >= 12) , 'arr_hour_AM_PM'] = 1
    dataset['arr_hour_AM_PM'] = dataset['arr_hour_AM_PM'].astype(int)

df['S_dep_hour'] = np.sin(2*np.pi*df['dep_hour']/24)
df['C_dep_hour'] = np.cos(2*np.pi*df['dep_hour']/24)
df_test['S_dep_hour'] = np.sin(2*np.pi*df_test['dep_hour']/24)
df_test['C_dep_hour'] = np.cos(2*np.pi*df_test['dep_hour']/24)


df['S_arr_hour'] = np.sin(2*np.pi*df['arr_hour']/24)
df['C_arr_hour'] = np.cos(2*np.pi*df['arr_hour']/24)
df_test['S_arr_hour'] = np.sin(2*np.pi*df_test['arr_hour']/24)
df_test['C_arr_hour'] = np.cos(2*np.pi*df_test['arr_hour']/24)

dataset['DATOP'] = pd.to_datetime(dataset['DATOP'], format='%Y-%m-%d')

data = [df, df_test]
for dataset in data:
    dataset['DATOP'] = pd.to_datetime(dataset['DATOP'], format='%Y-%m-%d')
    for i in range(dataset.shape[0]):
        dataset.loc[i, 'day_of_year'] = int(dataset.loc[i, 'DATOP'].strftime('%j'))

corrmat = df.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))
#plot heat map
g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="RdYlGn")

df.shape

df.head()

df.to_csv('/content/sample_data/Train_clean.csv', index=False)

df.columns

train_cols = ['DATOP', 'FLTID', 'DEPSTN', 'ARRSTN', 'STD', 'STA', 'STATUS',
       'AC', 'trajectory', 'month', 'day', 'day_of_week', 'year',
       'week_of_year', 'week_of_month', 'season', 'dep_hour', 'arr_hour',
       'dep_minute', 'arr_minute', 'flight_duration_sec',
       'flight_duration_hours', 'flight_duration_minutes', 'dep_hour_AM_PM',
       'arr_hour_AM_PM', 'S_dep_hour', 'C_dep_hour', 'S_arr_hour',
       'C_arr_hour', 'day_of_year']
X = df[train_cols]
test = df_test[train_cols]
y = df['target']

X.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,random_state=17)

categ_feat_idx = np.where(X_train.dtypes == 'object')[0]
categ_feat_idx

# from catboost import CatBoostRegressor
model = CatBoostRegressor(iterations=699, depth=10, learning_rate=0.1,l2_leaf_reg= 7, loss_function='RMSE')
model.fit(X_train, y_train,cat_features=categ_feat_idx,eval_set=(X_test, y_test),plot=True)

predictions = model.predict(X_test)
from math import sqrt
from sklearn.metrics import mean_squared_error

rmse = sqrt(mean_squared_error(y_test,predictions))
print(rmse)
#106.61722528055746

model.save_model('/content/sample_data/modele.cb')

from google.colab import files
files.download('/content/sample_data/modele.cb')

from catboost import CatBoostRegressor
model = CatBoostRegressor()
model.load_model('/content/sample_data/modele.cb')

import pandas as pd

new_data = pd.DataFrame({
    'DATOP': ['2016-04-24'],
    'FLTID': ['TU 0850'],
    'DEPSTN': ['TUN'],
    'ARRSTN': ['LYS'],
    'STD': ['2016-04-24 13:20:00'],
    'STA': ['2016-04-24 15:10:00'],
    'STATUS': ['ATA'],
    'AC': ['TU 320IMT'],
    'trajectory': ['TUN-LYS'],
    'month': [4],
    'day': [24],
    'day_of_week': [6],
    'year': [2016],
    'week_of_year': [16],
    'week_of_month': [3],
    'season': [2],
    'dep_hour': [13],
    'arr_hour': [15],
    'dep_minute': [20],
    'arr_minute': [10],
    'flight_duration_sec': [6600],
    'flight_duration_hours': [1],
    'flight_duration_minutes': [110],
    'dep_hour_AM_PM': [1],
    'arr_hour_AM_PM': [1],
    'S_dep_hour': [0.866025],
    'C_dep_hour': [-0.500000],
    'S_arr_hour': [0.866025],
    'C_arr_hour': [-0.500000],
    'day_of_year': [115]
})


 # Nouvelles données sur lesquelles vous souhaitez faire des prédictions
new_data['DATOP'] = pd.to_datetime(new_data['DATOP'])
new_data['STD'] = pd.to_datetime(new_data['STD'])
new_data['STA'] = pd.to_datetime(new_data['STA'])
predictions = model.predict(new_data)
print(predictions)